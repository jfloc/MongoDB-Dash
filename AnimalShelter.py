from pymongo import MongoClientfrom bson.objectid import ObjectId#method is used to verify the data is not none and is a dictionarydef verify_data(data: dict) -> bool:	        return data is not None and isinstance(data,dict)class AnimalShelter(object):        def __init__(self, username, password):            self.client = MongoClient('mongodb://%s:%s@localhost:27017' % (username,password))            self.database = self.client['animals']                    #uses the insert method to insert the dictionary to the animals collection                def create(self, data):            if verify_data(data):                self.database.aac_shelter_outcomes.insert(data)                return True            else:                raise Exception("Nothing to save, because data is empty or not dict type")                            	# uses verification method above and ensures count of documents is not 0 to verify that data is available to be read        def read(self, data):            if type(data) is dict and len(data) == 0:                return self.database.aac_shelter_outcomes.find(data,{"_id":0})            elif verify_data(data):                if(self.database.aac_shelter_outcomes.count(data) != 0):                    return self.database.aac_shelter_outcomes.find(data)                else:                    raise Exception("document not existent in database")            else:                raise Exception("data is not dictionary data type or is empty")                    	# Update uses the verification method and makes use of the $set operator to ensure no incorrect insertion of data is processed and old data is wiped.        def update(self, data, data_to_insert):            if verify_data(data) and verify_data(data_to_insert):                return self.database.aac_shelter_outcomes.update_one(data,{"$set": data_to_insert}).raw_result            else:                raise Exception("data is not of dictionary type or is empty")        	# Deletion is as simple as calling the delete_one function call and return the result of the raw_result attribute of DeleteResults        def delete(self, data_to_delete):            if(verify_data(data_to_delete)):                return self.database.aac_shelter_outcomes.delete_one(data_to_delete).raw_result            else:                raise Exception("data is not of dictionary type or is empty")